O que vamos aprender?
O dia de hoje se dedica a praticar ainda mais o seu conhecimento sobre Componentes React e a aprofund√°-lo com o conceito de Estado . Esse √© um conceito importante no qual voc√™ vai se aprofundar por todo o tempo que estudar React!
Um estado representa um momento de um componente din√¢mico. Se o seu componente √© um rel√≥gio, o estado atual dele √© a hora atual. Se o seu componente √© uma tabela cujo conte√∫do muda de acordo com o que o usu√°rio clica na p√°gina, o estado dele cont√©m o conte√∫do da tabela. Se o seu componente fosse um jogo de videogame, o estado seria o momento em que voc√™ est√° no jogo, a sua quantidade de vidas, muni√ß√£o, itens etc. Estado √©, ent√£o, um momento de algo que pode mudar ao longo do tempo (din√¢mico) . √â uma informa√ß√£o que voc√™ quer preservar enquanto o componente est√° interagindo com quem usa.
Achou confuso?! A aula de hoje √© para esclarecermos o que √© isso e como n√≥s usamos! √â o primeiro passo no entendimento de uma ferramenta muito importante. Al√©m disso, vamos ver como adicionamos os famosos eventos que j√° usamos tanto no JavaScript nos nossos componentes React.

Por que isso √© importante?
O estado dos componentes √© o que d√° dinamismo √†s p√°ginas do React , de acordo com a intera√ß√£o de quem usa. Ele √© uma abstra√ß√£o essencial para o desenvolvimento de p√°ginas mais ricas e interativas, que respondem a inputs do usu√°rio e se atualizam em fun√ß√£o disso.
Se os componentes s√£o a faca do React , o estado e os eventos s√£o o queijo. Com os tr√™s, voc√™ vai ter a faca e o queijo na m√£o para desenvolver p√°ginas t√£o interessantes e complexas como hoje voc√™ nem imagina! Agora assista ao v√≠deo abaixo para ter um gostinho do que o Estado no React √© capaz de fazer! Ao longo do dia aprenderemos a fazer isso!

O Estado de um componente √© um lugar especial que todo componente tem para armazenar informa√ß√µes que devem persistir enquanto a tela n√£o for fechada ou atualizada . √â o filtro selecionado, o item da lista destacado, o carrinho de compras, tudo isso e mais!
Essa √©, talvez, a pe√ßa mais essencial para o funcionamento do React. Enquanto numa aplica√ß√£o JavaScript sem uso de bibliotecas tais informa√ß√µes ficariam, muito provavelmente, espalhadas e desorganizadas, no React cada componente cuida das suas informa√ß√µes e o React garante que todas estejam atualizadas de maneira otimizada. Mas, antes de nos aprofundarmos em como usamos o Estado de um componente, vamos dar um passo atr√°s e falar de Eventos !

State vs Props
Voc√™ pode entender a diferen√ßa props vs state da seguinte forma:
props s√£o uma forma de passar dados de pai para filho.
state √© reservado para dados que seu componente controla.
O conceito √©: state , ou estado do componente, deve servir para guardar valores do Componente que mudam com o uso do mesmo. As props s√£o valores fixos que um componente recebe e n√£o altera.
Pelos princ√≠pios do React voc√™ nunca deve tentar alterar o que um componente recebe como props como no exemplo abaixo:

Em resumo
Vamos recapitular? Hoje, no conte√∫do, come√ßamos a desenvolver as seguintes habilidades:
Ler o estado de um componente e us√°-lo para alterar o que exibimos no browser;
Inicializar um componente, dando a ele um estado pr√©-definido;
Atualizar o estado de um componente.
Capturar eventos utilizando a sintaxe do React
Para isso estudamos, no conte√∫do, os seguintes pontos:
Todo componente possui seu pr√≥prio estado e tem 100% de controle sobre ele;
Quando um componente √© colocado na tela ele executa uma fun√ß√£o chamada constructor , e usando a linha super() podemos sobrescrev√™-la para estender seu comportamento;
O objeto this , acess√≠vel a toda classe de componente React , cont√©m tudo o que concerne √†quele componente e deve ser vinculado explicitamente √†s fun√ß√µes criadas dentro da classe, atrav√©s da sintaxe this.minhaFuncao = this.minhaFuncao.bind(this) no construtor do componente;
Fun√ß√µes que tratam eventos devem ser vinculadas aos seus respectivos elementos com {this.minhaFuncao} ou {() => this.minhaFuncao('Meu parametro') .
√â poss√≠vel ler o estado de um componente via this.state , √© poss√≠vel definir um estado inicial no construtor com uma atribui√ß√£o a this.state e deve-se atualizar tal estado somente com a fun√ß√£o this.setState .
A atualiza√ß√£o do estado √© ass√≠ncrona e, por isso, se voc√™ quiser garantir que uma atualiza√ß√£o ocorrer√° depois da outra, tal atualiza√ß√£o dever√° ser definida via callback passada √† fun√ß√£o this.setState , no formato this.setState((estadoAnterior, props) => novoEstado)
Para fixar
Defina uma l√≥gica que estabele√ßa que, quando o n√∫mero de cliques no bot√£o for par, ele deve ser verde.
A cor atual do bot√£o deve ser impressa num console.log() de dentro da fun√ß√£o do evento que lida com o clique. Fa√ßa isso acontecer!
ü¶ú Dica: Lembre-se de substituir a refer√™ncia √† fun√ß√£o, no evento, por uma callback que invoca!
Agora bora pra aula ao vivo e depois pros exerc√≠cios?! Hoje n√≥s vamos incrementar a nossa Pokedex!
