Vamos encarar mais um dia de React ?
Hoje voc√™ vai aprender sobre formul√°rios. Como voc√™ j√° viu, saber capturar eventos e criar formul√°rios que os usam √© fundamental para que voc√™ esteja preparado para as diferentes demandas do mercado.
Lembra dos exerc√≠cios e projetos envolvendo formul√°rios? Ent√£o, faz√™-los com React vai ser muito mais legal!

Voc√™ ser√° capaz de:
Criar formul√°rios utilizando sintaxe JSX com as tags : input , textarea , select , form .
Transmitir informa√ß√µes de componentes filhos para componentes pais via callbacks .

Por que isso √© importante?
Aprofundar seus conhecimentos no React n√£o √© uma tarefa f√°cil. Sabemos que o n√≠vel de complexidade que ele traz em um primeiro momento √© alto. O importante √© que fique claro que essa habilidade vai ser um grande diferencial para voc√™s no mercado de trabalho e ir√° ajudar na constru√ß√£o de front-ends ainda mais robustos.
A√≠ eu te pergunto: qual aplica√ß√£o que n√£o demanda a captura de eventos com um onClick ? Qual sistema n√£o tem ao menos um formul√°rio simples, como uma caixa de Login ? Acho que voc√™ mesmo j√° respondeu qual a import√¢ncia da aula de hoje! üöÄ

Conte√∫dos
E aqui vamos novamente aos formul√°rios. üóíÔ∏èü§£
Vamos descobrir que os formul√°rios no React se comportam de forma um pouco diferente do HTML padr√£o. Mas por qu√™? O state , que voc√™ aprendeu ontem, √© a chave para essa charada!

Componentes controlados
No JavaScript "tradicional", que voc√™s usavam nos primeiros blocos, voc√™ fez formul√°rios, certo? Pois bem, se pergunte o seguinte: onde ficavam os dados que voc√™s inseriam nesses formul√°rios? Os dados dos campos num√©ricos, de texto, select ... Eles n√£o ficavam em nenhuma vari√°vel declarada por voc√™ certo?
Pois ent√£o! Se voc√™ reparar com um inspect , vai ver que os dados dos campos preenchidos sempre aparecem no pr√≥prio DOM quando inseridos. Voc√™ acredita que √© a√≠ que esses dados s√£o salvos? Sim! No pr√≥prio DOM. Meio estranho, certo? Pensando numa aplica√ß√£o React , onde n√≥s salvar√≠amos os dados do nosso formul√°rio? Pensando no formul√°rio, l√≥gico, como um componente.
... No Estado , correto?
Pois √©! Como todos os dados que concernem os componentes do React, os dados de um formul√°rio tamb√©m devem ser salvos no Estado ! E eis o pulo do gato: a partir do momento que a informa√ß√£o do forms n√£o √© mais salva no pr√≥prio elemento, no DOM, mas no Estado do componente que o cont√©m, passamos a dizer que esse elemento √© um Componente Controlado!

üí° Aten√ß√£o! Essa nomenclatura, oficial do React, √© confusa. Estamos dizendo aqui que o elemento do formul√°rio √© um componente controlado. N√£o estamos falando dos componentes React aqui, mas dos elementos que comp√µem o formul√°rio! Cuidado para n√£o confundir.
üí° A extens√£o do Google Chrome React Developer Tools √© incr√≠velmente √∫til para se desenvolver aplicativos React! N√£o deixe de baix√°-la.
Para fixar
1 - Crie um formul√°rio com um campo select , dois inputs de tipo diferente, uma textarea e fa√ßa de um deles um componente controlado, ou seja, elementos do formul√°rio controlados pelo Estado
2 - Baixe a React Developer Tools e veja, nela, o dado inserido no elemento controlado sendo salvo no Estado.

event handlers gen√©ricos
Uma excelente forma de criarmos formul√°rios 100% com componentes controlados √© fazermos um event handler gen√©rico, capaz de atualizar o estado de todos os componentes com a mesma l√≥gica.
Copiar
handleChange({ target }) {
  const { name } = target;
  const value = target.type === 'checkbox' ? target.checked : target.value;

  this.setState({
    [name]: value,
  });
}
O truque √© o seguinte:
D√™ a cada elemento um nome que seja igual √† respectiva chave no estado do componente
No handler, recupere a partir do par√¢metro event o nome do componente que disparou o evento e o valor associado ao disparo.
Interpole o nome do componente como chave do estado numa sintaxe como a acima.
Para fixar
3 - Fa√ßa todos os seus elementos componentes do formul√°rio ficarem 100% controlados. Fa√ßa um event handler gen√©rico para lidar com eles.
4 - Acrescente no seu formul√°rio um input do tipo checkbox e garanta que seu event handler esteja tratando este caso corretamente.
5 - Busque na documenta√ß√£o de React acerca de formul√°rios (primeiro link da se√ß√£o de Recursos Adicionais!) como se deve adicionar um input para arquivos . Acrescente um ao seu formul√°rio.
6 - Encapsule alguns dos seus campos num fieldset . Entenda como ele funciona lendo a documenta√ß√£o .

Transmitindo informa√ß√µes de componente filho para componente pai
A transmiss√£o de informa√ß√µes de um componente filho para um componente pai √© um dos conceitos primordiais de React. Ele se baseia nos seguintes pilares:
O componente pai det√©m o Estado e controla completamente como ele ser√° atualizado. Isso significa que as fun√ß√µes que manipular√£o o estado devem ser declaradas sempre nele mesmo.
Quando algum componente filho deve passar alguma informa√ß√£o ao componente pai, ele deve receber como props a fun√ß√£o que atualiza o estado do pai e dar a ela, como par√¢metro, a informa√ß√£o pedida.
A informa√ß√£o transmitida dessa forma ser√° inserida no estado do componente pai.
No c√≥digo abaixo vemos um exemplo disso acontecendo numa aplica√ß√£o diferente do formul√°rio que estamos vendo: o contador de cliques do qual falamos no primeiro dia do bloco.
Copiar
import React from 'react';

class Button extends React.Component {
  render() {
    /* A fun√ß√£o que altera o estado do componente pai chega
       ao componente filho via `props`! */
    const { handleClick } = this.props;

    return (<button type="button" onClick={handleClick} >Contar clique!</button>);
  }
}

class App extends React.Component {
  constructor() {
    super();

    this.handleClick = this.handleClick.bind(this);

    // O componente pai √© o dono do estado!
    this.state = {
      numeroDeCliques: 0,
    };
  }

  /* A fun√ß√£o de alterar o estado √© definida no componente pai*/
  handleClick() {
    this.setState((estadoAnterior) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,
    }));
  }

  /* O componente filho recebe a fun√ß√£o de alterar estado do pai via `props`,
     na forma de uma callback */
  render() {
    return (
      <div>
        <h1>{`${this.state.numeroDeCliques} cliques!`}</h1>
        <Button handleClick={this.handleClick} />
      </div>
    );
  }
}

export default App
Para fixar
7 - Fa√ßa dois de seus campos serem componentes filhos do seu componente de formul√°rio. Garanta que seu estado ainda pertence ao componente pai.
8 - Fa√ßa duas valida√ß√µes em um desses componentes filhos e uma em um outro.
9 - Crie, no estado do componente pai, um campo formularioComErros que deve ser true caso algum desses componentes tenha erros e false caso contr√°rio.
ü¶ú Dica: Se algum dos componentes transmitir true para a fun√ß√£o que far√° o handle dos erros, qual valor deve ser armazenado no Estado ?


