{"ast":null,"code":"var _jsxFileName = \"/home/andre/trybe-exercicios/front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/timer/src/Timer.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n      phases: ['...Inspire...', '...Segure...', '...Expire...'],\n      phaseIndex: 0\n    };\n  } //utilizar para alteração inicial do estado\n\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    this.intervalId = setInterval(() => {\n      this.setState(prev => ({\n        seconds: prev.seconds + 1\n      }));\n    }, ONE_SECOND);\n  } //atualizando o estado segundos\n\n\n  componentDidUpdate(prevProsp, prevState) {\n    const timerLimit = 5;\n    const two = 2;\n    const zero = 0;\n\n    if (prevState.seconds === timerLimit) {\n      this.setState({\n        seconds: 0,\n        phaseIndex: prevState.phaseIndex === two ? zero : prevState.phaseIndex + 1\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    //pega valor atualizado sem delay\n    return true;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {\n      seconds,\n      phaseIndex,\n      phases\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: phases[phaseIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/andre/trybe-exercicios/front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/timer/src/Timer.js"],"names":["React","Timer","Component","constructor","props","state","seconds","phases","phaseIndex","componentDidMount","ONE_SECOND","intervalId","setInterval","setState","prev","componentDidUpdate","prevProsp","prevState","timerLimit","two","zero","shouldComponentUpdate","nextProps","nextState","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CADA;AAETC,MAAAA,MAAM,EAAE,CAAC,eAAD,EAAkB,cAAlB,EAAkC,cAAlC,CAFC;AAGTC,MAAAA,UAAU,EAAE;AAHH,KAAb;AAKH,GAR8C,CAU/C;;;AACAC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,UAAU,GAAG,IAAnB;AACA,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAeC,IAAD,KAAW;AACrBR,QAAAA,OAAO,EAAEQ,IAAI,CAACR,OAAL,GAAc;AADF,OAAX,CAAd;AAGH,KAJ4B,EAI1BI,UAJ0B,CAA7B;AAKH,GAlB8C,CAoB/C;;;AACAK,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,UAAMC,UAAU,GAAG,CAAnB;AACA,UAAMC,GAAG,GAAG,CAAZ;AACA,UAAMC,IAAI,GAAG,CAAb;;AACA,QAAIH,SAAS,CAACX,OAAV,KAAsBY,UAA1B,EAAsC;AAClC,WAAKL,QAAL,CAAc;AACVP,QAAAA,OAAO,EAAE,CADC;AAEVE,QAAAA,UAAU,EAAES,SAAS,CAACT,UAAV,KAAyBW,GAAzB,GAA+BC,IAA/B,GAAsCH,SAAS,CAACT,UAAV,GAAsB;AAF9D,OAAd;AAIH;AACJ;;AAEDa,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC;AACA,WAAO,IAAP;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKd,UAAN,CAAb;AACH;;AAKDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEpB,MAAAA,OAAF;AAAWE,MAAAA,UAAX;AAAuBD,MAAAA;AAAvB,QAAkC,KAAKF,KAA7C;AACA,wBACI;AAAA,8BACI;AAAA,kBAAME,MAAM,CAACC,UAAD;AAAZ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAMF;AAAN;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AArD8C","sourcesContent":["import React from \"react\";\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            phases: ['...Inspire...', '...Segure...', '...Expire...'],\n            phaseIndex: 0,\n        }\n    }\n\n    //utilizar para alteração inicial do estado\n    componentDidMount(){\n        const ONE_SECOND = 1000\n        this.intervalId = setInterval(() => {\n            this.setState((prev) => ({\n                seconds: prev.seconds +1\n            }))\n        }, ONE_SECOND)\n    }\n\n    //atualizando o estado segundos\n    componentDidUpdate(prevProsp, prevState) {\n        const timerLimit = 5;\n        const two = 2;\n        const zero = 0;\n        if (prevState.seconds === timerLimit) {\n            this.setState({\n                seconds: 0,\n                phaseIndex: prevState.phaseIndex === two ? zero : prevState.phaseIndex +1,\n            })\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        //pega valor atualizado sem delay\n        return true\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n    \n\n        \n    \n    render() {\n        const { seconds, phaseIndex, phases } = this.state;\n        return (\n            <section>\n                <h1>{ phases[phaseIndex] }</h1>\n                <h2>{ seconds }</h2>\n            </section>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}